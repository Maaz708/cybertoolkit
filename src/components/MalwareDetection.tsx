import React, { useState } from 'react';
import {
  Box,
  Button,
  CircularProgress,
  Paper,
  Typography,
  Alert,
  List,
  ListItem,
  ListItemText
} from '@mui/material';
import { UploadFile } from '@mui/icons-material';

interface ScanResult {
  filename: string;
  size: number;
  mime_type: string;
  timestamp: string;
  hashes: {
    md5: string;
    sha1: string;
    sha256: string;
  };
  signatureMatch?: {
    type: string;
    description: string;
    severity: string;
    algorithm: string;
  };
  suspicious_patterns: Array<{
    type: string;
    description: string;
  }>;
  entropy: number;
  file_analysis: {
    suspicious_features: Array<any>;
    metadata: Record<string, any>;
  };
  risk_score: number;
  threats: Array<{
    type: string;
    severity: string;
    details: any;
  }>;
  recommendation: {
    action: string;
    message: string;
    details: string;
  };
}

const MalwareDetection: React.FC = () => {
  const [file, setFile] = useState<File | null>(null);
  const [scanning, setScanning] = useState(false);
  const [result, setResult] = useState<ScanResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setFile(event.target.files[0]);
      setError(null);
      setResult(null);
    }
  };

  const handleScan = async () => {
    if (!file) return;

    setScanning(true);
    setError(null);

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch('http://localhost:3000/api/malware/scan', {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (data.status === 'error') {
        throw new Error(data.message);
      }

      setResult(data.data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during scanning');
    } finally {
      setScanning(false);
    }
  };

  const renderScanResult = (result: ScanResult) => (
    <Box sx={{ mt: 3 }}>
      <Typography variant="h6" gutterBottom>
        Scan Results
      </Typography>

      {result.recommendation && (
        <Alert
          severity={
            result.recommendation.action === 'BLOCK' ? 'error' :
              result.recommendation.action === 'WARNING' ? 'warning' : 'success'
          }
          sx={{ mb: 2 }}
        >
          {result.recommendation.message}
        </Alert>
      )}

      <List>
        <ListItem>
          <ListItemText
            primary="File Information"
            secondary={`${result.filename} (${result.size} bytes)`}
          />
        </ListItem>

        <ListItem>
          <ListItemText
            primary="Risk Score"
            secondary={`${result.risk_score}/100`}
          />
        </ListItem>

        {result.signatureMatch && (
          <ListItem>
            <ListItemText
              primary="Signature Match"
              secondary={`${result.signatureMatch.type}: ${result.signatureMatch.description}`}
            />
          </ListItem>
        )}

        <ListItem>
          <ListItemText
            primary="File Hashes"
            secondary={
              <>
                <Typography variant="body2">MD5: {result.hashes.md5}</Typography>
                <Typography variant="body2">SHA1: {result.hashes.sha1}</Typography>
                <Typography variant="body2">SHA256: {result.hashes.sha256}</Typography>
              </>
            }
          />
        </ListItem>

        {result.threats.length > 0 && (
          <ListItem>
            <ListItemText
              primary="Detected Threats"
              secondary={
                <List>
                  {result.threats.map((threat, index) => (
                    <ListItem key={index}>
                      <ListItemText
                        primary={threat.type}
                        secondary={`Severity: ${threat.severity}`}
                      />
                    </ListItem>
                  ))}
                </List>
              }
            />
          </ListItem>
        )}
      </List>
    </Box>
  );

  return (
    <Paper sx={{ p: 3, maxWidth: 800, margin: 'auto', mt: 4 }}>
      <Typography variant="h5" gutterBottom>
        Malware Detection
      </Typography>

      <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
        <Button
          variant="contained"
          component="label"
          startIcon={<UploadFile />}
          disabled={scanning}
        >
          Select File
          <input
            type="file"
            hidden
            onChange={handleFileChange}
          />
        </Button>

        <Button
          variant="contained"
          color="primary"
          onClick={handleScan}
          disabled={!file || scanning}
        >
          {scanning ? 'Scanning...' : 'Scan File'}
        </Button>
      </Box>

      {file && (
        <Typography variant="body2" sx={{ mb: 2 }}>
          Selected file: {file.name}
        </Typography>
      )}

      {scanning && (
        <Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}>
          <CircularProgress />
        </Box>
      )}

      {error && (
        <Alert severity="error" sx={{ mt: 2 }}>
          {error}
        </Alert>
      )}

      {result && renderScanResult(result)}
    </Paper>
  );
};

export default MalwareDetection;